{
  "version": 3,
  "sources": ["../../highlight.js/es/languages/groovy.js"],
  "sourcesContent": ["/*\n Language: Groovy\n Author: Guillaume Laforge <glaforge@gmail.com>\n Description: Groovy programming language implementation inspired from Vsevolod's Java mode\n Website: https://groovy-lang.org\n */\n\nfunction variants(variants, obj = {}) {\n  obj.variants = variants;\n  return obj;\n}\n\nfunction groovy(hljs) {\n  const regex = hljs.regex;\n  const IDENT_RE = '[A-Za-z0-9_$]+';\n  const COMMENT = variants([\n    hljs.C_LINE_COMMENT_MODE,\n    hljs.C_BLOCK_COMMENT_MODE,\n    hljs.COMMENT(\n      '/\\\\*\\\\*',\n      '\\\\*/',\n      {\n        relevance: 0,\n        contains: [\n          {\n            // eat up @'s in emails to prevent them to be recognized as doctags\n            begin: /\\w+@/,\n            relevance: 0\n          },\n          {\n            className: 'doctag',\n            begin: '@[A-Za-z]+'\n          }\n        ]\n      }\n    )\n  ]);\n  const REGEXP = {\n    className: 'regexp',\n    begin: /~?\\/[^\\/\\n]+\\//,\n    contains: [ hljs.BACKSLASH_ESCAPE ]\n  };\n  const NUMBER = variants([\n    hljs.BINARY_NUMBER_MODE,\n    hljs.C_NUMBER_MODE\n  ]);\n  const STRING = variants([\n    {\n      begin: /\"\"\"/,\n      end: /\"\"\"/\n    },\n    {\n      begin: /'''/,\n      end: /'''/\n    },\n    {\n      begin: \"\\\\$/\",\n      end: \"/\\\\$\",\n      relevance: 10\n    },\n    hljs.APOS_STRING_MODE,\n    hljs.QUOTE_STRING_MODE\n  ],\n  { className: \"string\" }\n  );\n\n  const CLASS_DEFINITION = {\n    match: [\n      /(class|interface|trait|enum|extends|implements)/,\n      /\\s+/,\n      hljs.UNDERSCORE_IDENT_RE\n    ],\n    scope: {\n      1: \"keyword\",\n      3: \"title.class\",\n    }\n  };\n  const TYPES = [\n    \"byte\",\n    \"short\",\n    \"char\",\n    \"int\",\n    \"long\",\n    \"boolean\",\n    \"float\",\n    \"double\",\n    \"void\"\n  ];\n  const KEYWORDS = [\n    // groovy specific keywords\n    \"def\",\n    \"as\",\n    \"in\",\n    \"assert\",\n    \"trait\",\n    // common keywords with Java\n    \"abstract\",\n    \"static\",\n    \"volatile\",\n    \"transient\",\n    \"public\",\n    \"private\",\n    \"protected\",\n    \"synchronized\",\n    \"final\",\n    \"class\",\n    \"interface\",\n    \"enum\",\n    \"if\",\n    \"else\",\n    \"for\",\n    \"while\",\n    \"switch\",\n    \"case\",\n    \"break\",\n    \"default\",\n    \"continue\",\n    \"throw\",\n    \"throws\",\n    \"try\",\n    \"catch\",\n    \"finally\",\n    \"implements\",\n    \"extends\",\n    \"new\",\n    \"import\",\n    \"package\",\n    \"return\",\n    \"instanceof\"\n  ];\n\n  return {\n    name: 'Groovy',\n    keywords: {\n      \"variable.language\": 'this super',\n      literal: 'true false null',\n      type: TYPES,\n      keyword: KEYWORDS\n    },\n    contains: [\n      hljs.SHEBANG({\n        binary: \"groovy\",\n        relevance: 10\n      }),\n      COMMENT,\n      STRING,\n      REGEXP,\n      NUMBER,\n      CLASS_DEFINITION,\n      {\n        className: 'meta',\n        begin: '@[A-Za-z]+',\n        relevance: 0\n      },\n      {\n        // highlight map keys and named parameters as attrs\n        className: 'attr',\n        begin: IDENT_RE + '[ \\t]*:',\n        relevance: 0\n      },\n      {\n        // catch middle element of the ternary operator\n        // to avoid highlight it as a label, named parameter, or map key\n        begin: /\\?/,\n        end: /:/,\n        relevance: 0,\n        contains: [\n          COMMENT,\n          STRING,\n          REGEXP,\n          NUMBER,\n          'self'\n        ]\n      },\n      {\n        // highlight labeled statements\n        className: 'symbol',\n        begin: '^[ \\t]*' + regex.lookahead(IDENT_RE + ':'),\n        excludeBegin: true,\n        end: IDENT_RE + ':',\n        relevance: 0\n      }\n    ],\n    illegal: /#|<\\//\n  };\n}\n\nexport { groovy as default };\n"],
  "mappings": "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",
  "names": ["variants"]
}
