{
  "version": 3,
  "sources": ["../../highlight.js/es/languages/ocaml.js"],
  "sourcesContent": ["/*\nLanguage: OCaml\nAuthor: Mehdi Dogguy <mehdi@dogguy.org>\nContributors: Nicolas Braud-Santoni <nicolas.braud-santoni@ens-cachan.fr>, Mickael Delahaye <mickael.delahaye@gmail.com>\nDescription: OCaml language definition.\nWebsite: https://ocaml.org\nCategory: functional\n*/\n\nfunction ocaml(hljs) {\n  /* missing support for heredoc-like string (OCaml 4.0.2+) */\n  return {\n    name: 'OCaml',\n    aliases: [ 'ml' ],\n    keywords: {\n      $pattern: '[a-z_]\\\\w*!?',\n      keyword:\n        'and as assert asr begin class constraint do done downto else end '\n        + 'exception external for fun function functor if in include '\n        + 'inherit! inherit initializer land lazy let lor lsl lsr lxor match method!|10 method '\n        + 'mod module mutable new object of open! open or private rec sig struct '\n        + 'then to try type val! val virtual when while with '\n        /* camlp4 */\n        + 'parser value',\n      built_in:\n        /* built-in types */\n        'array bool bytes char exn|5 float int int32 int64 list lazy_t|5 nativeint|5 string unit '\n        /* (some) types in Pervasives */\n        + 'in_channel out_channel ref',\n      literal:\n        'true false'\n    },\n    illegal: /\\/\\/|>>/,\n    contains: [\n      {\n        className: 'literal',\n        begin: '\\\\[(\\\\|\\\\|)?\\\\]|\\\\(\\\\)',\n        relevance: 0\n      },\n      hljs.COMMENT(\n        '\\\\(\\\\*',\n        '\\\\*\\\\)',\n        { contains: [ 'self' ] }\n      ),\n      { /* type variable */\n        className: 'symbol',\n        begin: '\\'[A-Za-z_](?!\\')[\\\\w\\']*'\n        /* the grammar is ambiguous on how 'a'b should be interpreted but not the compiler */\n      },\n      { /* polymorphic variant */\n        className: 'type',\n        begin: '`[A-Z][\\\\w\\']*'\n      },\n      { /* module or constructor */\n        className: 'type',\n        begin: '\\\\b[A-Z][\\\\w\\']*',\n        relevance: 0\n      },\n      { /* don't color identifiers, but safely catch all identifiers with ' */\n        begin: '[a-z_]\\\\w*\\'[\\\\w\\']*',\n        relevance: 0\n      },\n      hljs.inherit(hljs.APOS_STRING_MODE, {\n        className: 'string',\n        relevance: 0\n      }),\n      hljs.inherit(hljs.QUOTE_STRING_MODE, { illegal: null }),\n      {\n        className: 'number',\n        begin:\n          '\\\\b(0[xX][a-fA-F0-9_]+[Lln]?|'\n          + '0[oO][0-7_]+[Lln]?|'\n          + '0[bB][01_]+[Lln]?|'\n          + '[0-9][0-9_]*([Lln]|(\\\\.[0-9_]*)?([eE][-+]?[0-9_]+)?)?)',\n        relevance: 0\n      },\n      { begin: /->/ // relevance booster\n      }\n    ]\n  };\n}\n\nexport { ocaml as default };\n"],
  "mappings": ";AASA,SAAS,MAAM,MAAM;AAEnB,SAAO;AAAA,IACL,MAAM;AAAA,IACN,SAAS,CAAE,IAAK;AAAA,IAChB,UAAU;AAAA,MACR,UAAU;AAAA,MACV,SACE;AAAA,MAOF;AAAA;AAAA,QAEE;AAAA;AAAA,MAGF,SACE;AAAA,IACJ;AAAA,IACA,SAAS;AAAA,IACT,UAAU;AAAA,MACR;AAAA,QACE,WAAW;AAAA,QACX,OAAO;AAAA,QACP,WAAW;AAAA,MACb;AAAA,MACA,KAAK;AAAA,QACH;AAAA,QACA;AAAA,QACA,EAAE,UAAU,CAAE,MAAO,EAAE;AAAA,MACzB;AAAA,MACA;AAAA;AAAA,QACE,WAAW;AAAA,QACX,OAAO;AAAA;AAAA,MAET;AAAA,MACA;AAAA;AAAA,QACE,WAAW;AAAA,QACX,OAAO;AAAA,MACT;AAAA,MACA;AAAA;AAAA,QACE,WAAW;AAAA,QACX,OAAO;AAAA,QACP,WAAW;AAAA,MACb;AAAA,MACA;AAAA;AAAA,QACE,OAAO;AAAA,QACP,WAAW;AAAA,MACb;AAAA,MACA,KAAK,QAAQ,KAAK,kBAAkB;AAAA,QAClC,WAAW;AAAA,QACX,WAAW;AAAA,MACb,CAAC;AAAA,MACD,KAAK,QAAQ,KAAK,mBAAmB,EAAE,SAAS,KAAK,CAAC;AAAA,MACtD;AAAA,QACE,WAAW;AAAA,QACX,OACE;AAAA,QAIF,WAAW;AAAA,MACb;AAAA,MACA;AAAA,QAAE,OAAO;AAAA;AAAA,MACT;AAAA,IACF;AAAA,EACF;AACF;",
  "names": []
}
